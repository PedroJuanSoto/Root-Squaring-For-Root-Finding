import mpmath as mp
from math import factorial
from DLG_alg_mpmath import DLG_rational_form, DLG, add, sub, mul, div, precision, mpc, mpf, pod

#each entry contains 2D list of [coeff, [list of each factor of the product as a double (subscript, degree)]] corresponding to each term
##this might be too many levels. We'll see.
#PDP[i] = (p'/p)^(i). Need to compute up to R_{i+1} = p^(i+1)/p, for which we need to find coeffs p_0, ..., p_{i+1}
#E.g., PDP[0] = p'/p = R_1

PDP_FORMULAE = [ \
[[1, [(1, 1)]]], \
[[1, [(2, 1)]], [-1, [(1, 2)]]], \
[[1, [(3, 1)]], [-3, [(2, 1), (1, 1)]], [2, [(1, 3)]]], \
[[1, [(4, 1)]], [-4, [(3, 1), (1, 1)]], [12, [(2, 1), (1, 2)]], [-3, [(2, 2)]], [-6, [(1, 4)]]], \
[[1, [(5, 1)]], [-5, [(4, 1), (1, 1)]], [20, [(3, 1), (1, 2)]], [-10, [(3, 1), (2, 1)]], \
 [-60, [(2, 1), (1, 3)]], [30, [(2, 2), (1, 1)]], [24, [(1, 5)]]], \
[[1, [(6, 1)]], [-6, [(5, 1), (1, 1)]], [30, [(4, 1), (1, 2)]], [-15, [(2, 1), (4, 1)]], \
 [-120, [(3, 1), (1, 3)]], [120, [(3, 1), (1, 1), (2, 1)]], [-10, [(3, 2)]], [360, [(2, 1), (1, 4)]], \
 [-270, [(2, 2), (1, 2)]], [30, [(2, 3)]], [-120, [(1, 6)]]], \
[[1, [(7, 1)]], [-7, [(6, 1), (1, 1)]], [-21, [(5, 1), (2, 1)]], [-35, [(4, 1), (3, 1)]], \
 [720, [(1, 7)]], [42, [(5, 1), (1, 2)]], [-210, [(4, 1), (1, 3)]], [210, [(4, 1), (1, 1), (2, 1)]], \
 [840, [(3, 1), (1, 4)]], [-1260, [(3, 1), (1, 2), (2, 1)]], [210, [(3, 1), (2, 2)]], \
 [140, [(3, 2), (1, 1)]], [-2520, [(2, 1), (1, 5)]], [2520, [(2, 2), (1, 3)]], [-630, [(2, 3), (1, 1)]]], \
[[1, [(8, 1)]], [-35, [(4, 2)]], [20160, [(1, 6), (2, 1)]], [-5040, [(1, 8)]], [-630, [(2, 4)]], \
 [-8, [(7, 1), (1, 1)]], [-28, [(6, 1), (2, 1)]], [-56, [(5, 1), (3, 1)]], [-5040, [(1, 1), (2, 2), (3, 1)]], \
 [56, [(6, 1), (1, 2)]], [336, [(5, 1), (2, 1), (1, 1)]], [560, [(4, 1), (3, 1), (1, 1)]], \
 [-336, [(1, 3), (5, 1)]], [1680, [(4, 1), (1, 4)]], [-2520, [(4, 1), (1, 2), (2, 1)]], [420, [(4, 1), (2, 2)]], \
 [-6720, [(3, 1), (1, 5)]], [13440, [(3, 1), (1, 3), (2, 1)]], [-1680, [(3, 2), (1, 2)]], \
 [560, [(3, 2), (2, 1)]], [-25200, [(2, 2), (1, 4)]], [10080, [(2, 3), (1, 2)]]], \
[[1, [(9, 1)]], [40320, [(1, 9)]], [-181440, [(2, 1), (1, 7)]], [60480, [(3, 1), (1, 6)]], \
 [272160, [(2, 2), (1, 5)]], [-15120, [(4, 1), (1, 5)]], [-151200, [(2, 1), (1, 4), (3, 1)]], \
 [-151200, [(2, 3), (1, 3)]], [3024, [(5, 1), (1, 4)]], [30240, [(4, 1), (1, 3), (2, 1)]], \
 [20160, [(3, 2), (1, 3)]], [90720, [(2, 2), (1, 2), (3, 1)]], [22680, [(2, 4), (1, 1)]], \
 [-504, [(6, 1), (1, 3)]], [-4536, [(5, 1), (1, 2), (2, 1)]], [-7560, [(3, 1), (1, 2), (4, 1)]], \
 [-11340, [(4, 1), (1, 1), (2, 2)]], [-15120, [(3, 2), (1, 1), (2, 1)]], [-7560, [(2, 3), (3, 1)]], \
 [72, [(7, 1), (1, 2)]], [504, [(6, 1), (1, 1), (2, 1)]], [1008, [(5, 1), (1, 1), (3, 1)]], \
 [630, [(4, 2), (1, 1)]], [756, [(5, 1), (2, 2)]], [2520, [(3, 1), (2, 1), (4, 1)]], [560, [(3, 3)]], \
 [-9, [(8, 1), (1, 1)]], [-36, [(7, 1), (2, 1)]], [-84, [(6, 1), (3, 1)]], [-126, [(5, 1), (4, 1)]]], \
[[1, [(10, 1)]], [1814400, [(2, 1), (1, 5), (3, 1)]], [-378000, [(2, 1), (1, 4), (4, 1)]], \
 [226800, [(2, 2), (1, 2), (4, 1)]], [60480, [(5, 1), (1, 3), (2, 1)]], [-7560, [(6, 1), (1, 2), (2, 1)]], \
 [720, [(7, 1), (1, 1), (2, 1)]], [1680, [(6, 1), (1, 1), (3, 1)]], [2520, [(5, 1), (1, 1), (4, 1)]], \
 [-75600, [(3, 1), (1, 1), (4, 1), (2, 1)]], [-604800, [(3, 1), (1, 7)]], [5040, [(6, 1), (1, 4)]], \
 [-10, [(9, 1), (1, 1)]], [-45, [(8, 1), (2, 1)]], [90, [(8, 1), (1, 2)]], [-18900, [(2, 3), (4, 1)]], \
 [-120, [(7, 1), (3, 1)]], [-210, [(6, 1), (4, 1)]], [-9450, [(4, 2), (1, 2)]], [-252000, [(3, 2), (1, 4)]], \
 [-37800, [(3, 2), (2, 2)]], [-16800, [(3, 3), (1, 1)]], [3150, [(4, 2), (2, 1)]], [4200, [(3, 2), (4, 1)]], \
 [1814400, [(2, 1), (1, 8)]], [-3175200, [(2, 2), (1, 6)]], [2268000, [(2, 3), (1, 4)]], \
 [-567000, [(2, 4), (1, 2)]], [-30240, [(5, 1), (1, 5)]], [1260, [(6, 1), (2, 2)]], [151200, [(4, 1), (1, 6)]], \
 [-720, [(7, 1), (1, 3)]], [22680, [(2, 5)]], [-126, [(5, 2)]], [-362880, [(1, 10)]], \
 [100800, [(3, 1), (1, 3), (4, 1)]], [-1512000, [(2, 2), (1, 3), (3, 1)]], [302400, [(2, 3), (1, 1), (3, 1)]], \
 [-22680, [(5, 1), (1, 1), (2, 2)]], [-15120, [(3, 1), (1, 2), (5, 1)]], [302400, [(3, 2), (1, 2), (2, 1)]], \
 [5040, [(3, 1), (2, 1), (5, 1)]]], \
[[1, [(11, 1)]], [-4158000, [(2, 2), (1, 3), (4, 1)]], [831600, [(2, 3), (1, 1), (4, 1)]], \
 [-41580, [(6, 1), (1, 1), (2, 2)]], [-23284800, [(3, 1), (1, 6), (2, 1)]], [1663200, [(2, 2), (1, 1), (3, 2)]], \
 [498960, [(5, 1), (1, 2), (2, 2)]], [-1386000, [(3, 1), (1, 4), (4, 1)]], [-103950, [(4, 2), (1, 1), (2, 1)]], \
 [-207900, [(3, 1), (2, 2), (4, 1)]], [-138600, [(3, 2), (1, 1), (4, 1)]], [-5544000, [(2, 1), (1, 3), (3, 2)]], \
 [24948000, [(2, 2), (1, 4), (3, 1)]], [-8316000, [(2, 3), (1, 2), (3, 1)]], [-11880, [(7, 1), (1, 2), (2, 1)]], \
 [110880, [(6, 1), (1, 3), (2, 1)]], [990, [(8, 1), (2, 1), (1, 1)]], [2640, [(7, 1), (3, 1), (1, 1)]], \
 [4620, [(6, 1), (4, 1), (1, 1)]], [-41580, [(4, 1), (1, 2), (5, 1)]], [-27720, [(3, 1), (1, 2), (6, 1)]], \
 [13860, [(4, 1), (2, 1), (5, 1)]], [9240, [(3, 1), (2, 1), (6, 1)]], [4989600, [(2, 1), (1, 5), (4, 1)]], \
 [-831600, [(2, 1), (1, 4), (5, 1)]], [221760, [(3, 1), (1, 3), (5, 1)]], [3628800, [(1, 11)]], \
 [332640, [(5, 1), (1, 6)]], [1980, [(7, 1), (2, 2)]], [-55440, [(6, 1), (1, 5)]], [110, [(9, 1), (1, 2)]], \
 [-990, [(8, 1), (1, 3)]], [3326400, [(3, 2), (1, 5)]], [369600, [(3, 3), (1, 2)]], [-92400, [(3, 3), (2, 1)]], \
 [39916800, [(2, 2), (1, 7)]], [-34927200, [(2, 3), (1, 5)]], [12474000, [(2, 4), (1, 3)]], \
 [138600, [(4, 2), (1, 3)]], [415800, [(2, 4), (3, 1)]], [-41580, [(5, 1), (2, 3)]], [6652800, [(3, 1), (1, 8)]], \
 [-55, [(9, 1), (2, 1)]], [-1247400, [(2, 5), (1, 1)]], [7920, [(7, 1), (1, 4)]], [-165, [(8, 1), (3, 1)]], \
 [-11, [(10, 1), (1, 1)]], [-330, [(7, 1), (4, 1)]], [-1663200, [(4, 1), (1, 7)]], [-462, [(6, 1), (5, 1)]], \
 [2772, [(5, 2), (1, 1)]], [-19958400, [(1, 9), (2, 1)]], [11550, [(4, 2), (3, 1)]], [9240, [(3, 2), (5, 1)]], \
 [1663200, [(3, 1), (1, 2), (4, 1), (2, 1)]], [-166320, [(3, 1), (1, 1), (5, 1), (2, 1)]]], \
[[1, [(12, 1)]], [-92400, [(3, 4)]], [-1247400, [(2, 6)]], [-462, [(6, 2)]], [-39916800, [(1, 12)]], \
 [11550, [(4, 3)]], [1995840, [(2, 3), (1, 1), (5, 1)]], [1320, [(9, 1), (1, 1), (2, 1)]], \
 [3960, [(8, 1), (3, 1), (1, 1)]], [7920, [(7, 1), (4, 1), (1, 1)]], [11088, [(6, 1), (5, 1), (1, 1)]], \
 [27720, [(6, 1), (4, 1), (2, 1)]], [4435200, [(3, 3), (1, 1), (2, 1)]], [55440, [(4, 1), (3, 1), (5, 1)]], \
 [319334400,[(2, 1), (1, 7), (3, 1)]], [-3326400, [(3, 1), (1, 4), (5, 1)]], [-415800, [(4, 2), (1, 1), (3, 1)]],\
 [-498960,[(3, 1), (2, 2), (5, 1)]], [74844000, [(2, 2), (1, 4), (4, 1)]], [-24948000, [(2, 3), (1, 2), (4, 1)]], \
 [11975040, [(5, 1), (1, 5), (2, 1)]], [-17820, [(8, 1), (1, 2), (2, 1)]], [-47520, [(7, 1), (1, 2), (3, 1)]], \
 [15840, [(7, 1), (2, 1), (3, 1)]], [-1663200, [(6, 1), (1, 4), (2, 1)]], [443520, [(6, 1), (1, 3), (3, 1)]], \
 [997920, [(6, 1), (1, 2), (2, 2)]], [-83160, [(6, 1), (4, 1), (1, 2)]], [665280, [(4, 1), (1, 3), (5, 1)]], \
 [-69854400, [(2,1), (1,6), (4,1)]], [-9979200, [(2,2), (1,3),(5,1)]], [-419126400, [(2,2), (1,5), (3,1)]], \
 [199584000, [(2,3), (1, 3), (3, 1)]], [-24948000, [(2, 4), (1, 1), (3, 1)]], [190080, [(7, 1), (1, 3), (2, 1)]], \
 [-71280, [(7, 1), (1, 1), (2, 2)]], [-332640, [(3, 2), (1, 1), (5, 1)]], [99792000, [(2, 1), (1, 4), (3, 2)]], \
 [-49896000, [(2,2), (1,2), (3,2)]], [19958400, [(3,1), (1,5), (4,1)]], [2494800, [(4,2), (1,2), (2,1)]], \
 [3326400, [(3,2), (1,2), (4,1)]], [-831600, [(3,2), (2,1), (4,1)]], [9979200, [(3,1), (1,1), (4,1), (2,2)]], \
 [-332640, [(3, 1), (1, 1), (6, 1), (2, 1)]], [-33264000, [(3, 1), (1, 3), (4, 1), (2, 1)]], \
 [3991680, [(3, 1), (1, 2), (5, 1), (2, 1)]], [-498960, [(4, 1), (1, 1), (2, 1), (5, 1)]], \
 [-79833600, [(3, 1), (1, 9)]], [239500800, [(1, 10), (2, 1)]], [-1320, [(9, 1), (1, 3)]], \
 [11880, [(8, 1), (1, 4)]], [-49896, [(5, 2), (1, 2)]], [-46569600, [(3, 2), (1, 6)]], [16632, [(5, 2), (2, 1)]], \
 [18480, [(3, 2), (6, 1)]], [-538876800, [(2, 2), (1, 8)]], [558835200, [(2, 3), (1, 6)]], \
 [-261954000, [(2, 4), (1, 4)]], [44906400, [(2, 5), (1, 2)]], [-2079000, [(4, 2), (1, 4)]], \
 [-311850, [(4, 2), (2, 2)]], [-7392000, [(3, 3), (1, 3)]], [-3991680, [(5, 1), (1, 7)]], \
 [665280, [(6, 1), (1, 6)]], [2970, [(8, 1), (2, 2)]], [-95040, [(7, 1), (1, 5)]], [132, [(10, 1), (1, 2)]], \
 [1247400, [(2, 4), (4, 1)]], [19958400, [(4, 1), (1, 8)]], [-12, [(11, 1), (1, 1)]], [-66, [(10, 1), (2, 1)]], \
 [-220, [(9, 1), (3, 1)]], [-495, [(8, 1), (4, 1)]], [-792, [(7, 1), (5, 1)]], [3326400, [(2, 3), (3, 2)]], \
 [-83160, [(6, 1), (2, 3)]]], \
[[1, [(13, 1)]], [-81081000, [(2, 4), (1, 1), (4, 1)]], [-115830, [(8, 1), (1, 1), (2, 2)]], \
 [823680, [(7, 1), (1, 3), (3, 1)]], [-1816214400, [(3, 2), (1, 5), (2, 1)]], [120120, [(6, 1), (4, 1), (3, 1)]], \
 [-720720, [(3,2), (6,1), (1,1)]], [194594400, [(2,2), (1,4), (5,1)]], [-54054000, [(4,2), (1,3), (2,1)]], \
 [-7207200, [(3,1), (1,4), (6,1)]], [972972000, [(2,4), (1,2), (3,1)]], [-10810800, [(4,1), (1,4), (5,1)]], \
 [-1621620, [(4,1), (2,2), (5,1)]], [-2702700, [(4,2), (2,1), (3,1)]], [8648640, [(3,2), (1,2), (5,1)]], \
 [1037836800, [(2,1), (1,7), (4,1)]], [16216200, [(4,2), (1,1), (2,2)]], [21621600, [(3,1), (2,3), (4,1)]], \
 [-64864800, [(2, 3), (1, 2), (5, 1)]], [-77220, [(8, 1), (3, 1), (1, 2)]], [-154440, [(7, 1), (4, 1), (1, 2)]], \
 [-216216, [(6,1), (5,1), (1,2)]], [-144144000, [(3,3), (1,2), (2,1)]], [7264857600, [(2,2), (1,6), (3,1)]], \
 [51891840, [(3,1), (1,5), (5,1)]], [10810800, [(4,2), (1,2), (3,1)]], [-2162160, [(3,2), (2,1), (5,1)]], \
 [-1362160800, [(2,2), (1,5), (4,1)]], [648648000, [(2,3), (1,3), (4,1)]], [-72072000, [(3,2), (1,3), (4,1)]], \
 [72072, [(6,1), (5,1), (2,1)]], [20592, [(7,1), (5,1), (1,1)]], [51480, [(7,1), (4,1), (2,1)]], \
 [-648648, [(5,2), (1,1), (2,1)]], [-302702400, [(3,1), (1,6), (4,1)]], [1716, [(10,1), (1,1), (2,1)]], \
 [5720, [(9,1), (1,1), (3,1)]], [12870, [(8,1), (4,1), (1,1)]], [25740, [(8,1), (3,1), (2,1)]], \
 [308880, [(8,1), (1,3), (2,1)]], [-216216000, [(2,3), (3,2), (1,1)]], [4324320, [(2,3), (1,1), (6,1)]], \
 [-1081080, [(6,1), (2,2), (3,1)]], [-4670265600, [(3,1), (1,8), (2,1)]], [-25740, [(9,1), (1,2), (2,1)]], \
 [-21621600, [(6,1), (1,3), (2,2)]], [1297296000, [(2,2), (1,3), (3,2)]], [-181621440, [(5,1), (1,6), (2,1)]], \
 [25945920, [(6,1), (1,5), (2,1)]], [-3088800, [(7,1), (1,4), (2,1)]], [1441440, [(6,1), (1,3), (4,1)]], \
 [1853280, [(7, 1), (1, 2), (2, 2)]], [-4540536000, [(2, 3), (1, 4), (3, 1)]], [479001600, [(1, 13)]], \
 [-1287, [(8, 1), (5, 1)]], [-1716, [(7, 1), (6, 1)]], [-154440, [(7, 1), (2, 3)]], [72072, [(5, 2), (3, 1)]], \
 [-1716, [(10,1), (1,3)]], [-259459200, [(4, 1), (1, 9)]], [34320, [(3, 2), (7, 1)]], [4290, [(9, 1), (2, 2)]], \
 [-154440, [(8,1),(1,5)]], [3243240, [(2,4),(5,1)]], [1037836800, [(3,1),(1,10)]], [7783776000, [(1,9),(2,2)]], \
 [-3113510400, [(1,11), (2,1)]], [17160, [(9,1), (1,4)]], [4804800, [(3,4), (1,1)]], [691891200, [(3,2), (1,7)]], \
 [97297200, [(2,6), (1,1)]], [32432400, [(4,2), (1,5)]], [-450450, [(4,3), (1,1)]], [51891840, [(5,1), (1,8)]], \
 [-32432400, [(2,5), (3,1)]], [-1201200, [(3,3), (4,1)]], [90090, [(4,2), (5,1)]], [5448643200, [(2,4), (1,5)]], \
 [-1362160800, [(2,5), (1,3)]], [144144000, [(3,3),(1,4)]], [12012, [(6,2),(1,1)]], [14414400, [(2,2), (3,3)]], \
 [-9340531200, [(2,3), (1,7)]], [864864, [(5,2), (1,3)]], [-8648640, [(6,1), (1,7)]], [-13, [(12, 1), (1, 1)]], \
 [1235520, [(7, 1), (1, 6)]], [156, [(11, 1), (1, 2)]], [-78, [(11, 1), (2, 1)]], [-286, [(10, 1), (3, 1)]], \
 [-715, [(9,1), (4,1)]], [-324324000, [(3,1), (1,2), (4,1), (2,2)]], [43243200, [(3,2), (1,1), (4,1), (2,1)]], \
 [8648640, [(6, 1), (1, 2), (3, 1), (2, 1)]], [12972960, [(4, 1), (1, 2), (5, 1), (2, 1)]], \
 [25945920, [(3, 1), (1, 1), (5, 1), (2, 2)]], [-1081080, [(6, 1), (4, 1), (2, 1), (1, 1)]], \
 [-2162160, [(4, 1), (3, 1), (5, 1), (1, 1)]], [-86486400, [(3, 1), (1, 3), (5, 1), (2, 1)]], \
 [648648000, [(2, 1), (1, 4), (4, 1), (3, 1)]], [-617760, [(7, 1), (1, 1), (3, 1), (2, 1)]]], \
]
# Input note:
# We already put together p, dp, p_rev, dp_rev, and deg. 


#based on Alg 39
# p and dp are blackbox (lambda) functions
def get_cauchy_sums(p, dp, q):
    Z = [mp.expjpi(div(2*g,q)) for g in range(q)]
    R = [div(dp(z), p(z)) for z in Z]
    S = [div(mp.fsum([mul(mp.expjpi(div(2*((h+1)*k % q), q)),R[k]) for k in range(q)]), q) for h in range(q)]

    return S

# p and dp are actually scaled p_rev and dp_rev
# p and dp are blackbox (lambda) functions
# S[0] is incorrect but we don't use it. 
def get_cauchy_sums_rev(p, dp, q):
    Z = [mp.expjpi(div(2*g,q)) for g in range(q)]
    R = [div(dp(z), p(z)) for z in Z]
    S = [div(mp.fsum([mul(mp.expjpi(div(2*((1-h)*k % q), -q)),R[k]) for k in range(q)]), q) for h in range(q)]

    return S

#based on eqs 38
# returns coeffs p_{d-1}, ...., p_{d-q}
# in our program, we expect p to be a scaled reverse polynomial
def get_coeffs_via_newton_ids(S):
    #S is the list of cauchy sums s_0, ..., s_q
    coeffs = []
    q = len(S)
    for i in range(1, q):
        s = mp.fsum(list(map(lambda x,y: x*y, coeffs[::-1], S[1:i])))
        cur_coeff = mp.fdiv(mp.fadd(s, S[i]), -i)
        coeffs.append(cur_coeff)

    return coeffs

#tcs = l+2 trailing coefficients
# in the order [p_{l+2}, ..., p_0]
def get_Ris(tcs, l):
    R = [1]
    #tcs = tcs + [0 for i in range(len(tcs), l+1)]
    for i in range(1,l+1):
        R.append(div(mul(factorial(i), tcs[i]), tcs[0]))

    return R

def eval_lth_deriv(R, l):
    #if len(R) < l+1: exit(1)
    expr = PDP_FORMULAE[l]
    deriv = mp.mpf(0)
    for term in expr:
        coeff = term[0]
        monomial = mp.fprod([pod(R[t[0]], t[1]) for t in term[1]])
        deriv = add(deriv, mul(coeff, monomial))

    return deriv
    

# based on Alg 4
# computes the q trailing coeffs of p
# p, etc. are blackbox (lambda) functions
def alg(p, dp, p_rev, dp_rev, d, l):
    #get the q-1 nearly-trailing coeffs via Cauchy sums + Newton Iterations

    #get the trailing term by evaluating p at 0:
    tc = mp.mpc(p(0))

    S = get_cauchy_sums(lambda x:div(p_rev(x), tc), lambda x: div(dp_rev(x), tc), l+2)
    #S = get_cauchy_sums(p_rev,dp_rev, l+2)
    #tc = S[0]

    coeffs = get_coeffs_via_newton_ids(S)
    #assumes monic poly
    #coeffs[i]=p_i
    coeffs = [tc]+[mul(tc, c) for c in coeffs]
    #coeffs = [tc]+coeffs

    #place holder return statement
    if l > 3: return coeffs[:l], None, None
    R = get_Ris(coeffs, l+1)
    D = eval_lth_deriv(R, l)

    return coeffs[:l], R, D

# Algorithm 4, uses R_i = p^(i)(x)/p(x) at x = 0
# the input tcs are the l+2 trailing coeffs of p
# in the order [p_0, ..., p_{l+2}]
# TODO: settle on how to handle the coeff order since generally it's reversed except in Ri, etc. 
def get_root_radii_via_Ris(p, l, rev=False):
    tcs = p.get_trailing_coeffs(l+2, rev)
    R = get_Ris(tcs, l+1)
    D = eval_lth_deriv(R, l)

    # temp return call. eventually want to go ahead and compute the root radii
    return D





